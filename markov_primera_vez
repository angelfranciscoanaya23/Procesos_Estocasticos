'''
Fecha de ultima edición 12 / 05 / 2021
Autor Intelectual: Angel Francisco Pérez Anaya, González Briones Miguel Ariel
    Fernández Moreno Alan

Codigo bajo licencia MIT.
'''
# Maquina virtual para ejecutar el script
# https://colab.research.google.com/drive/1BpeLjGFMzKRn_hKJ4bS6RkLHIAB9NUrI?usp=sharing
#Importamos libreria para el manejo de funciones
from fractions import Fraction

#Funcion que calcula la multiplicacion de dos matrices
def multiplicacion_matrices(m1, m2):
    if len(m1[0]) == len(m2):
        m3 = []
        for i in range(len(m1)):
            m3.append([])
            for j in range(len(m2[0])):
                m3[i].append(0)
        
        for i in range(len(m1)):
            for j in range(len(m2[0])):
                for k in range(len(m1[0])):
                    m3[i][j] += round(m1[i][k]*m2[k][j], 3)
    return m3

def bienvenida():
    alumnos = '''
    UNIVERSIDAD NACIONAL AUTONOMA DE MEXICO
    FACULTAD DE ESTUDIOS SUPERIORES ACATLAN
    Matematicas Aplicadas y Computaciòn.

    Integrantes:
    González Briones Miguel Ariel
    Fernández Moreno Alan
    Pérez Anaya Angel Francisco
        '''
    print(alumnos)
    return 0

def imprimir_matriz(matriz):
    for fila in matriz:
        print("[", end = "")
        for elemento in fila:
            print("{:8.3f}".format(elemento), end = " ")
        print("]")
    print()

    return 0

def entrada_matriz():
    '''
    Entrada: Número de estados
             Matriz de transicion
    Salida: Una matriz de tamaño de numero de estados
    '''
    dimension = int(input("Introduce número de estados: "))

    matriz = []
    for i in range(dimension):
        print('---------------------------------------------------------------')
        matriz.append([])
        for j in range(dimension):
            valor = float(Fraction(input("Fila {}, Columna {}: ".format(i, j))))
            matriz[i].append(valor)
        print('---------------------------------------------------------------')
        print()
    print()

    imprimir_matriz(matriz)
    
    return matriz

def entrada_valores(total_estados):
     '''
        Entrada:
            Ningun objeto
        Proceso:
            Guardar variables para futuros procesos en el 
            programa
        Salida:
            Estado inicial (i)
            Estado final (j)
            Número de periodos (n)
     '''
     print("En esta parte vamos a introducir los datos necesarios.")
     print("Recuerda que tenemos {} estados comenzando desde cero".format(total_estados))
     print("Estados Disponibles --> {}".format(list(range(total_estados))))
     print()
     
     estado_inicial = int(float(input("Estado inicial (i): ")))
     estado_final = int(float(input("Estado final  (j): ")))
     periodos = int(float(input("Número de periodos (n): ")))
     return estado_inicial, estado_final, periodos

def markov(x, estado_inicial, estado_final, pasos):
    
    
    pi_cero = [[0] * len(x)]
    pi_cero[0][estado_inicial] = 1

    prob = 0
    for i in range(pasos+1):
        
        pi_cero = multiplicacion_matrices(pi_cero, x)
        if pasos-1 == i:
            prob = pi_cero[0][estado_final]
            
    
    return prob

def primera_vez(x, estado_inicial, estado_final, pasos):
    acumulador = 0
    valor_T = markov(x, estado_inicial, estado_final, 1)

    cache_T = [0]
    cache_T.append(valor_T)
    for i in range(2, pasos+1):   
        acumulador = 0
        for j in range(1, i, 1):
            p_n_m = markov(x, estado_final, estado_final, i - j)
            # print(f'{cache_T[j]} x {p_n_m}')
            acumulador += cache_T[j] * p_n_m
        # print(f'Valor T {valor_T}')
        prob_n = markov(x, estado_inicial, estado_final, i)
        valor_T = prob_n - acumulador
        cache_T.append(valor_T)
    resultado = valor_T
    print()
    print(f'P_{estado_inicial} (T_{estado_final} =  {pasos}) = {resultado}')
    print()
    print("La probabilidad a primera vez es :{}".format(resultado))
    return resultado
    


def main():
    bienvenida()
    input("Enter para continuar ... ")
    while True:
        matriz = entrada_matriz()
        total_estados = len(matriz)
        input("Enter para continuar ... ")
        while True:
            inicial, final, periodos = entrada_valores(total_estados)
            #markov(matriz, inicial, final, periodos)
            primera_vez(matriz, inicial, final, periodos)
            print()
            print("Si quieres hacer otro calculo con la misma matriz de transicion ingresa 1 en cualquier otro caso 0: ")
            si = input("--> ")
            if si != "1" and si != '1.0':
                print("Nos vemos luego.")
                break
            print("Bienvenido de nuevo amigo")
            print()
        print("¿Deseas cambiar de matriz de transicion ingresa 1 o 0 para salir del programa?")
        si = input("--> ")
        if si != "1" and si != '1.0':
            print("Nos vemos luego.")
            break
    return 0


main()



